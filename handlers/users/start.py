from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart, Text
from aiogram.utils.exceptions import BotBlocked

import utils.db_api.commands.user as us
import keyboards.inline.raffle as mk
import keyboards.inline.instuction as hp
import handlers.users.registration as rr
from loader import dp
from utils.db_api.commands.admins import add_admin
from utils.db_api.commands.raffles import select_creator_id

from utils.misc import rate_limit


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@rate_limit(2)
@dp.message_handler(CommandStart())
async def start_cmd(message: types.Message):
    global deep_link
    global msg
    await us.add_user(telegram_id=message.from_user.id, username=f'@{message.from_user.username}')
    deep_link = message.get_args()
    array = await select_creator_id()
    try:
        if deep_link in array:
            msg = await message.answer(f"üë®‚Äçüîß –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n"
                                       f"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ <b>—Ä–æ–∑—ã–≥—Ä—ã—à–µ</b>, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É</b> –Ω–∏–∂–µ.",
                                       reply_markup=mk.starting_raffle)
        elif deep_link == '20344839jfksWRIWOR':
            await add_admin(telegram_id=message.from_user.id)
            await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–æ—Ç–µ.')
        else:
            await message.answer('üë®‚Äçüîß –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –Ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö.')
    except BotBlocked:
        print('Bot was blocked')


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ üìç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
@dp.callback_query_handler(Text(equals='registration'))
async def pre_check_username(call: types.CallbackQuery):
    await msg.delete()
    if call.from_user.username is None:
        await call.message.answer('üë®‚Äçüîß –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n'
                                  '–ß—Ç–æ–±—ã –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, <b>–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å</b> –Ω–∞—à–µ–π <b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</b>.',
                                  reply_markup=hp.how_set_username)
    else:
        await rr.registration_on_raffle(message=call.message, deep_link=deep_link)


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚ùï –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
@dp.callback_query_handler(Text(equals='checked'))
async def check_username(call: types.CallbackQuery):
    if call.from_user.username is None:
        await call.message.edit_text('üë®‚Äçüîß –í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
                                     '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç–∞—Ç—å–µ–π.', reply_markup=hp.how_set_username)
    else:
        await rr.registration_on_raffle(message=call.message, deep_link=deep_link)
