# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from data.config import channel
from keyboards.inline.admin import channel_post
from loader import dp
from states.administator import Admin
import utils.db_api.commands.raffles as db


@dp.callback_query_handler(Text(equals='create_raffle'))
async def create_raffle(call: types.CallbackQuery):
    await call.message.edit_text('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n'
                                 '- –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞,\n'
                                 '- —Å—É–º–º–∞ —á–µ–∫–∞\n\n'
                                 '–°–ø–µ—Ä–≤–∞, <b>–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É</b>\n'
                                 '–ü—Ä–∏–º–µ—Ä: 30 —Ñ–µ—Ä–≤–∞–ª—è.',
                                 )
    await Admin.get_date.set()


# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –ë–î.
@dp.message_handler(state=Admin.get_date)
async def get_date(message: types.Message, state: FSMContext):
    date = message.text
    check = await db.insert_date(telegram_id=message.from_user.id, date=date)
    if check is True:
        await message.answer('–ó–∞ –≤–∞–º–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à.\n')
        await state.reset_state()
    else:
        await message.answer('–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–∞.\n'
                             '–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É —á–µ–∫–∞</b>\n'
                             '–ü—Ä–∏–º–µ—Ä: 1000 —Ä—É–±–ª–µ–π')
    await Admin.get_amount.set()


@dp.message_handler(state=Admin.get_amount)
async def get_amount(message: types.Message):
    amount = message.text
    await db.insert_amount(telegram_id=message.from_user.id, amount=amount)
    await message.answer('–°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n'
                         '–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ), —É–∫–∞–∑–∞–≤ –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞.\n\n'
                         '–î–∞—Ç—É –∏ –°—Å—ã–ª–∫—É –ë–æ—Ç –≤–ø–∏—à–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!'
                         )
    await Admin.get_text.set()


@dp.message_handler(state=Admin.get_text, content_types=['photo', 'text'])
async def get_text(message: types.Message, state: FSMContext):
    date = await db.select_date(telegram_id=message.from_user.id)
    amount = await db.select_amount(telegram_id=message.from_user.id)

    link = f't.me/Carbon69Bot?start={message.from_user.id}'

    if message.photo:
        text = message.caption
        file_id = message.photo[-1].file_id
        await message.answer('–í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥:')
        await message.answer_photo(photo=file_id, caption=f'{text}\n\n'
                                                          f'üìÜ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - {date}\n'
                                                          f'üìç –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ - {link}', reply_markup=channel_post)
    else:
        text = message.text
        await message.answer('–í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥:')
        await message.answer(
            f'{text}\n\n'
            f'üìÜ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - {date}\n'
            f'üìç –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ - {link}', reply_markup=channel_post)
    await state.reset_state()


@dp.callback_query_handler(Text(startswith='channel_'))
async def public_or_delete(call: types.CallbackQuery):
    data = call.data.split('_')
    if data[1] == 'post':
        target_channel = channel
        message = await call.message.edit_reply_markup()
        await message.send_copy(chat_id=target_channel)
        await call.answer('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')

    elif data[1] == 'delete':
        await db.delete_raffle(telegram_id=call.from_user.id)
        await call.answer('–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
